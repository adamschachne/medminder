#!/usr/bin/env node

const moment = require('moment');
const { Client } = require('pg');
const connection = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: true
});
const knex = require('knex')({
    client: 'pg',
    connection: {
      host: connection.host,
      port: connection.port,
      user: connection.user,
      password: connection.password,
      database: connection.database,
      ssl: true
    }
    //connection: process.env.DATABASE_URL
});

var nowMoment = moment();
var buffer = 0.1; // ~6 minutes plus or minus

knex.select('*')
.from('medications')
.where('active', '=', true)
.asCallback(function(err, rows) {
	if (err) console.log(err)
	for (var i = 0; i < rows.length; i++) {

		// last notified will always be before now
		var last_notified = rows[i].last_notified;
		if (last_notified) {
			var lastNotifiedMoment = moment(parseInt(last_notified));
			var timeSinceLastNotification = moment.duration(nowMoment.diff(lastNotifiedMoment)).asHours();
			//console.log(timeSinceLastNotification);
			
			// dont send a notification if the last one was sent within half an hour
			if (timeSinceLastNotification < 0.5) { 
				continue;
			}
		}
		
		var remind_time = parseInt(rows[i].remind_time);
		var repeat = parseInt(rows[i].repeat);
		
		if (nowMoment.valueOf() < remind_time) {
			continue;
		}
		
		var remindMoment = moment(remind_time);
		var duration = moment.duration(nowMoment.diff(remindMoment));
		var numHoursNormalized = (duration.asHours() % repeat);
		
		//console.log(numHoursNormalized);
		if (buffer > numHoursNormalized && numHoursNormalized > 0) {
			sendNotification(rows[i]);
			continue;
		}
	}
})

function sendNotification(m) {
	var currentTimeString = nowMoment.format("dddd, MMMM Do YYYY, h:mm:ss a");
	console.log(currentTimeString + "   -----   " + "sending notification to uid:" + m.uid + " for medication:"+ m.mid);
	
	/*
	
	add notification code here
	
	*/
	
	knex('medications')
	.where('mid', '=', m.mid)
	.update({
		last_notified: nowMoment.valueOf()
	})
	.then(function (result) {
	})
}
